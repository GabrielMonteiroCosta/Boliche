using Spectre.Console;
using System.ComponentModel.Design;
using System.Linq.Expressions;
using System.Collections;
using static Program;
using System.Collections.Generic;
using System;
using static System.Net.Mime.MediaTypeNames;
using Spectre.Console.Cli;
using System.Data.SqlClient;
using System.Numerics;
using System.Data;


//todo: Finalizar a parte da fila, começar a parte de cálculo de Tempo que cada cliente fica junto com as coisas que ele pediu no inicio
//-> somar e trazer a finalização. o Histórico do cliete precisa ser finalizado pois nõ está somando assim não pode ser aplicado descontos
internal class Program
{
    const string connectionString = "Server=DESKTOP-UFKML55;Database=Boliche1;User Id=sa;Password=Vector5**;";
    private static void Main(string[] args)
    {
        List<Users> clientes = new();
        List<Product> products = new();
        List<Fila> fila = new();
        List<int> pista = new List<int>();

        while (true)
        {
            Console.WriteLine("\nBem-Vindo ao Gaboliche!" +
                "\n(1) Verificar a ocupação e efetuar liberação da pista" +
                "\n(2) Cadastrar, Atualizar ou Ativar/Inativar Usuários" +
                "\n(3) Cadastrar, Atualizar ou Ativar/Inativar Produtos" +
                "\n(4) Listar Usuários, Promoções e a Fila de Espera" +
                "\n(5) Registrar a saída de um Jogador" +
                "\n(6) Adicionar uma nova pista" +
                "\n(0) Fechar e Sair.");

            Console.Write("\nSelecione uma das opções: ");
            string option = Console.ReadLine();

            switch (option)
            {
                case "1": CheckMembers(); break;
                case "2": SelectUserOption(); break;
                case "3": SelectProductOption(); break;
                case "4": Waiting(); break;
                case "5": RemoveFromTrack(); break;
                case "6": CreateTrack(); break;
                case "0": Console.WriteLine("Encerrando o programa..."); return;
                default: Console.WriteLine("Insira uma opção válida!"); break;
            }
        }
    }
    static void Menu()
    {
        List<Product> listProduct = new();
        using (SqlConnection connection = new(connectionString))
        {
            connection.Open();
            string query = @"
            SELECT
                idItem,
                descricao,
                status,
                quantidade,
                precoVenda
            FROM Produtos";

            using (SqlCommand command = new(query, connection))
            using (SqlDataReader reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    Product product = new()
                    {
                        IdItem = Convert.ToInt32(reader["idItem"]),
                        Descricao = reader["descricao"].ToString(),
                        Status = Convert.ToBoolean(reader["status"]),
                        Quantidade = Convert.ToInt32(reader["quantidade"]),
                        PrecoVenda = Convert.ToDouble(reader["precoVenda"])
                    };
                    listProduct.Add(product);
                }
            }
        }

        Console.WriteLine("\nCardápio:\n");
        foreach (var product in listProduct)
        {
            Console.WriteLine($"R${product.PrecoVenda:F2} - {product.Descricao}");
        }
    }
    static void CreateTrack()
    {
        Console.WriteLine("Tem certeza de que deseja adicionar mais uma pista ao Boliche?");
        var option = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                .Title("Cadastro de pistas ")
                .PageSize(10)
                .MoreChoicesText("[grey][/]")
                .AddChoices(new[]
                {
                "Cadastrar nova pista", "Não cadastrar"
                }));

        switch (option)
        {
            case "Cadastrar nova pista":
                AddTrack();
                break;
            case "Não cadastrar":
                return;
        }
    }
    static void AddTrack()
    {
        using (SqlConnection connect = new(connectionString))
        {
            connect.Open();

            int nextId;
            using (SqlCommand cmdNextId = new("SELECT ISNULL(MAX(idPista), 0) + 1 FROM Pista", connect))
            {
                nextId = (int)cmdNextId.ExecuteScalar();
            }

            string query = @"INSERT INTO Pista (idPista, status) VALUES (@idPista, 1)";
            using (SqlCommand cmd = new SqlCommand(query, connect))
            {
                cmd.Parameters.AddWithValue("@idPista", nextId);
                cmd.ExecuteNonQuery();
            }

            Console.WriteLine($"Pista com ID {nextId} cadastrada com sucesso.");
        }
    }
    static void InsertToTrack()
    {
        Users user = null;
        Pista track = null;
        List<Product> productList = new();

        static void CheckTime()
        {
            var day = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                .Title("Qual é o dia da semana? ")
                .PageSize(10)
                .MoreChoicesText("[grey](Selecione o dia: )[/]")
                .AddChoices(new[]
                {
                "Segunda-Feira", "Terça-Feira", "Quarta-Feira", "Quinta-Feira", "Sexta-Feira", "Sábado", "Domingo"
                }));

            DateTime horaAtual = DateTime.Now;
            Console.WriteLine($"Hoje é dia [{horaAtual}] [{day}]");
        }

        Console.Write("Insira o ID do cliente que você deseja inserir na pista: ");
        if (int.TryParse(Console.ReadLine(), out int catchId))
        {
            DatabaseHelper.ExecuteCommand(cmd =>
            {
                cmd.CommandText = @"SELECT id, nome, CPF, status, telefone FROM Clientes WHERE id = @id";
                cmd.Parameters.AddWithValue("@id", catchId);
                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        user = new Users
                        {
                            Id = Convert.ToInt32(reader["id"]),
                            Nome = reader["nome"].ToString(),
                            Status = Convert.ToBoolean(reader["status"]),
                            Telefone = reader["telefone"].ToString(),
                            CPF = reader["CPF"].ToString()
                        };
                    }
                }
            });

            Console.WriteLine("Selecione uma das pistas para colocar o cliente (1 à 6): ");
            if (int.TryParse(Console.ReadLine(), out int trackId))
            {
                DatabaseHelper.ExecuteCommand(cmd =>
                {
                    cmd.CommandText = @"SELECT idPista, status FROM Pista WHERE idPista = @idPista";
                    cmd.Parameters.AddWithValue("@idPista", trackId);
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            track = new Pista
                            {
                                idPista = Convert.ToInt32(reader["idPista"]),
                                Status = Convert.ToBoolean(reader["status"])
                            };
                        }
                    }
                });

                if (track != null)
                {
                    int count = DatabaseHelper.ExecuteScalar(cmd =>
                    {
                        cmd.CommandText = "SELECT COUNT(idUser) FROM Pista WHERE idUser = @idUser";
                        cmd.Parameters.AddWithValue("@idUser", catchId);
                        return (int)cmd.ExecuteScalar();
                    });

                    if (count > 0)
                    {
                        Console.WriteLine("Esse ID já está em uso no Gaboliche!");
                        return;
                    }

                    if (track.Status && track.idPista <= 6)
                    {
                        Console.WriteLine($"Inserindo o cliente {user.Nome} na pista {track.idPista}");
                        track.Status = false;
                        DatabaseHelper.ExecuteNonQuery("UPDATE Pista SET idUser = @idUser, status = 0, HorarioEntrada = @horarioEntrada WHERE idPista = @idPista", cmd =>
                        {
                            cmd.Parameters.AddWithValue("@idUser", user.Id);
                            cmd.Parameters.AddWithValue("@idPista", track.idPista);
                            cmd.Parameters.AddWithValue("@horarioEntrada", DateTime.Now);
                        });
                    }
                    else
                    {
                        Console.WriteLine("Mais do que 6 pessoas não são suportadas, o cliente será colocado em uma fila de espera.");
                        DatabaseHelper.ExecuteNonQuery("INSERT INTO filaEspera (idUser) VALUES (@idUser)", cmd =>
                        {
                            cmd.Parameters.AddWithValue("@idUser", user.Id);
                        });
                    }

                    Console.WriteLine("Selecione os produtos e quantidades desejadas:");

                    DatabaseHelper.ExecuteCommand(cmd =>
                    {
                        cmd.CommandText = "SELECT idItem, descricao, precoVenda, quantidade FROM Produtos";
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                Product product = new Product
                                {
                                    IdItem = Convert.ToInt32(reader["idItem"]),
                                    Descricao = reader["descricao"].ToString(),
                                    PrecoVenda = Convert.ToDouble(reader["precoVenda"]),
                                    Quantidade = Convert.ToInt32(reader["quantidade"])
                                };
                                productList.Add(product);
                            }
                        }
                    });

                    foreach (var product in productList)
                    {
                        Console.WriteLine($"ID: {product.IdItem} - {product.Descricao} - R${product.PrecoVenda} - Disponível: {product.Quantidade}");
                    }

                    while (true)
                    {
                        Console.Write("Digite o ID do produto para adicionar ao pedido (ou 0 para finalizar): ");
                        if (int.TryParse(Console.ReadLine(), out int productId) && productId == 0)
                        {
                            break;
                        }

                        var selectedProduct = productList.FirstOrDefault(p => p.IdItem == productId);
                        if (selectedProduct != null)
                        {
                            Console.Write($"Quantidade de {selectedProduct.Descricao}: ");
                            if (int.TryParse(Console.ReadLine(), out int quantity) && quantity > 0 && quantity <= selectedProduct.Quantidade)
                            {
                                DatabaseHelper.ExecuteNonQuery("UPDATE Produtos SET quantidade = quantidade - @quantity WHERE idItem = @idItem", cmd =>
                                {
                                    cmd.Parameters.AddWithValue("@idItem", selectedProduct.IdItem);
                                    cmd.Parameters.AddWithValue("@quantity", quantity);
                                });

                                Console.WriteLine($"Produto {selectedProduct.Descricao} atualizado com sucesso.");
                            }

                            Console.WriteLine("Quantidade inválida ou insuficiente.");
                            return;
                        }
                        Console.WriteLine("Produto não encontrado.");
                        return;
                    }
                }
                Console.WriteLine("Pista não encontrada.");
                return;
            }
            Console.WriteLine("ID da pista inválido.");
            return;
        }
        Console.WriteLine("ID do cliente inválido.");
        return;
    }
    static void Waiting()
    {
        List<Pista> pistas = new();

        using (SqlConnection connection = new(connectionString))
        {
            try
            {
                connection.Open();
                string query = @"SELECT idPista, status FROM Pista";

                using (SqlCommand command = new(query, connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            Pista track = new()
                            {
                                idPista = Convert.ToInt32(reader["idPista"]),
                                Status = Convert.ToBoolean(reader["status"])
                            };
                            pistas.Add(track);
                        }
                    }
                }

                if (pistas.Count > 0)
                {
                    foreach (var track in pistas)
                    {
                        Console.WriteLine(track);
                    }
                }
                else
                {
                    Console.WriteLine("Nenhuma pista encontrada.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Ocorreu um erro ao buscar as pistas: " + ex.Message);
            }
        }
    }
    static void RemoveFromTrack()
    {
        Console.Write("Insira o ID da PISTA que você deseja registrar a saída: ");

        if (int.TryParse(Console.ReadLine(), out int trackId))
        {
            string query = @"UPDATE Pista 
                         SET idUser = NULL, 
                             HorarioEntrada = NULL, 
                             status = @status, 
                             HorarioSaida = @horarioSaida 
                         WHERE idPista = @idPista";
            DateTime leftHour = DateTime.Now;

            using (SqlConnection connection = new(connectionString))
            {
                try
                {
                    connection.Open();
                    using (SqlCommand command = new(query, connection))
                    {
                        command.Parameters.AddWithValue("@idPista", trackId);
                        command.Parameters.AddWithValue("@horarioSaida", leftHour);
                        command.Parameters.AddWithValue("@status", true);

                        int rowsAffected = command.ExecuteNonQuery();
                        if (rowsAffected > 0)
                        {
                            Console.WriteLine($"Horário de saída registrado com sucesso: {leftHour}");
                        }
                        else
                        {
                            Console.WriteLine("Nenhuma pista encontrada com o ID fornecido.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Ocorreu um erro ao registrar a saída: " + ex.Message);
                }
            }
        }
        else
        {
            Console.WriteLine("ID da pista inválido.");
        }
    }
    static void CheckMembers()
    {
        Console.WriteLine("Olá, seja bem-vindo! Quantas pessoas irão participar? ");

        while (true)
        {
            if (int.TryParse(Console.ReadLine(), out int participantes))
            {
                DiscountByPeople(participantes);

                Console.WriteLine("Preciso fazer o cadastro de pelo menos 1 participante. Você já tem cadastro ou precisa criar?");
                var option = AnsiConsole.Prompt(
                    new SelectionPrompt<string>()
                        .Title("Área Geral do Usuário:")
                        .PageSize(10)
                        .MoreChoicesText("[grey](Selecione a opção desejada: )[/]")
                        .AddChoices(new[]
                        {
                        "Cadastrar Usuário",
                        "Já tenho cadastro",
                        "Voltar"
                        })
                );

                switch (option)
                {
                    case "Voltar":
                        return;
                    case "Cadastrar Usuário":
                        CreateUser();
                        InsertToTrack();
                        break;
                    case "Já tenho cadastro":
                        ListUser();
                        InsertToTrack();
                        break;
                }
            }
            break;
        }

        static void DiscountByPeople(int participantes)
        {
            if (participantes <= 5 && participantes > 0)
            {
                Console.WriteLine($"Separando equipamento para {participantes} pessoas. Deseja fazer o nosso cadastro Gaboliche-Fã?\n" +
                    "Usuários cadastrados no nosso sistema ganham 15% de desconto na sexta vez que vêm aqui!");
            }
            else if (participantes > 6)
            {
                Console.WriteLine("Mais do que 6 pessoas não são suportadas, o limite são 6 pistas!");
                Console.WriteLine($"Você quer entrar com 6 pessoas. Lembrando que os outros {participantes - 6} participantes entrarão em uma fila de espera.");
                Console.Write("Continuar com 6 participantes (S/N): ");

                string continuaComFila = Console.ReadLine();
                if ("s".Equals(continuaComFila, StringComparison.OrdinalIgnoreCase))
                {
                    Console.WriteLine("Continuando com 6 pessoas!");
                }
                else if ("n".Equals(continuaComFila, StringComparison.OrdinalIgnoreCase))
                {
                    Console.WriteLine("Ok, muito obrigado pela compreensão!");
                    return;
                }
            }
            else if (participantes == 6)
            {
                Console.WriteLine("Separando equipamento para 6 pessoas. 10% de desconto aplicado para cada um no valor final!");
            }
        }
    }
    public static string? CreateCPF()
    {
        static string? CheckCPF()
        {
            Console.WriteLine("Digite o CPF: ");
            string? validar = Console.ReadLine();

            if (validar?.Length != 11)
            {
                Console.WriteLine("Não foi possível registrar esse CPF, parece que há menos números do que deveria!");
                return CheckCPF();
            }
            return validar;
        }

        string? cpf = CheckCPF();

        string query = "SELECT COUNT(CPF) FROM Clientes WHERE CPF = @CPF";
        int existingCpfCount = DatabaseHelper.ExecuteScalar<int>(cmd =>
        {
            cmd.CommandText = query;
            cmd.Parameters.AddWithValue("@CPF", string.IsNullOrEmpty(cpf) ? DBNull.Value : cpf);
            return (int)cmd.ExecuteScalar();
        });

        if (existingCpfCount > 0)
        {
            Console.WriteLine("Esse CPF já existe cadastrado no nosso sistema.");
            throw new Exception();
        }

        return cpf;
    }
    public static string? CreatePhone()
    {
        static string? CheckPhone()
        {
            Console.Write("Digite o número de Telefone: ");
            string? phoneNumber = Console.ReadLine();

            if (phoneNumber?.Length != 11)
            {
                Console.WriteLine("Número de telefone inválido. Deve conter 11 dígitos.");
                return CheckPhone();
            }

            return phoneNumber;
        }

        string? phone = CheckPhone();

        string query = "SELECT COUNT(telefone) FROM Clientes WHERE telefone = @telefone";

        int phoneCount = DatabaseHelper.ExecuteScalar<int>(cmd =>
        {
            cmd.CommandText = query;
            cmd.Parameters.AddWithValue("@telefone", string.IsNullOrEmpty(phone) ? DBNull.Value : phone);
            return (int)cmd.ExecuteScalar();
        });

        if (phoneCount > 0)
        {
            throw new Exception("Este número de telefone já está cadastrado no sistema!");
        }

        return phone;
    }
    public static void ListUser()
    {
        List<Users> listUsers = new();

        string query = @"
        SELECT
            id,
            nome,
            CPF,
            status,
            telefone,
            historico
        FROM Clientes";

        using (SqlDataReader reader = DatabaseHelper.ExecuteReader(query, cmd => { }))
        {
            while (reader.Read())
            {
                Users user = new Users
                {
                    Id = Convert.ToInt32(reader["id"]),
                    Nome = reader["nome"].ToString(),
                    CPF = reader["CPF"].ToString(),
                    Telefone = reader["telefone"].ToString(),
                    Status = Convert.ToBoolean(reader["status"]),
                    Historico = Convert.ToInt32(reader["historico"])
                };
                listUsers.Add(user);
            }
        }

        foreach (var user in listUsers)
        {
            Console.WriteLine(user);
        }
    }
    public static void ListProduct()
    {
        List<Product> listProduct = new();

        string query = @"
        SELECT
            idItem,
            descricao,
            status,
            quantidade,
            precoVenda
        FROM Produtos";

        using (SqlDataReader reader = DatabaseHelper.ExecuteReader(query, cmd => { }))
        {
            while (reader.Read())
            {
                Product product = new Product
                {
                    IdItem = Convert.ToInt32(reader["idItem"]),
                    Descricao = reader["descricao"].ToString(),
                    Status = Convert.ToBoolean(reader["Status"]),
                    Quantidade = Convert.ToInt32(reader["quantidade"]),
                    PrecoVenda = Convert.ToDouble(reader["precoVenda"])
                };
                listProduct.Add(product);
            }
        }

        foreach (var product in listProduct)
        {
            Console.WriteLine(product);
        }
    }
    public static void PrintLists()
    {
        while (true)
        {
            Console.WriteLine("" +
                "\n(1) Listar Produtos" +
                "\n(2) Listar Usuários" +
                "\n(3) Listar Promoções" +
                "\n(4) Listar Fila de Espera" +
                "\n(5) Listar Preços/Horários" +
                "\n(6) Cardápio" +
                "\n(0) <- Voltar ao menu anterior");

            Console.Write("Selecione uma das opções acima: ");

            string option = Console.ReadLine();
            switch (option)
            {
                case "1": ListProduct(); break;
                case "2": ListUser(); break;
                case "3": ListPromotions(); break;
                case "4": ListQueue(); break;
                case "5": PriceTable(); break;
                case "6": Menu(); break;
                case "0": Console.WriteLine("\nRetornando..."); Thread.Sleep(1000); Console.Clear(); return;
                default: Console.WriteLine("Por favor digite uma opção válida!"); break;
            }
            static void ListPromotions()
            {
                var panel = new Panel(new Spectre.Console.Text("" +
                    "> Fidelidade: Após a 5° vez no Gaboliche, ganhe 15% de Desconto na sua próxima vinda!" +
                    "\n> Cupom Galera da Pesada: 10% de Desconto para pista com 6 pessoas." +
                    "\n> Cupom Pais e Filhos: 5% de Desconto."));

                panel.Header = new PanelHeader("Promoções Ativas");
                panel.Border = BoxBorder.Double;
                panel.Padding = new Padding(2, 2, 2, 2);
                panel.Expand = true;
                panel.BorderStyle = Color.Gold3_1;

                AnsiConsole.Render(panel);


            }
            static void ListQueue()
            {
                Console.WriteLine("Sem fila.");
            }
            static void PriceTable()
            {
                DateTime horaAtual = DateTime.Now;
                Console.WriteLine("\n|-----------------------|\n|Bem-Vindo ao Gaboliche!|\n|-----------------------|");
                Console.WriteLine("\n***Veja a nossa tabela de preços de Segunda até Quinta-Feira***");
                Console.WriteLine("\n|-----------------------------|" +
                    "\n|12h00 até às 17h00 = R$100,00|" +
                    "\n|17h00 até às 22h00 = R$120,00|");
                Console.WriteLine("|-----------------------------|");
                Console.WriteLine("\nVALOR FIXO NO TÊNIS E MEIAS: R$10,00");

                Console.WriteLine("\n***Veja a nossa tabela de preços de Sexta à Domingo (Vésperas e Feriados)***");
                Console.WriteLine("\n|-----------------------------|" +
                    "\n|12h00 até às 17h00 = R$110,00|" +
                    "\n|17h00 até às 22h00 = R$130,00|");
                Console.WriteLine("|-----------------------------|");
                Console.WriteLine("\nVALOR FIXO NO TÊNIS E MEIAS: R$10,00");
            }

        }
    }
    public static void CreateUser()
    {
        Users users = new();
        try
        {
            users.CPF = CreateCPF();
        }
        catch
        {
            return;
        }

        Console.Write("Insira o Nome do Player: ");
        users.Nome = Console.ReadLine();
        Console.Write("Insira o telefone do cliente (DDD): ");
        users.Telefone = Console.ReadLine();
        users.Historico += 1;

        int proximoId = DatabaseHelper.ExecuteScalar<int>(cmd =>
        {
            cmd.CommandText = "SELECT ISNULL(MAX(id), 0) + 1 FROM Clientes";
            return (int)cmd.ExecuteScalar();
        });

        string query = @"
    INSERT INTO Clientes
    (
        Id, Nome, CPF, Status, Telefone, Historico
    )
    VALUES 
    (
        @id, @nome, @CPF, 1, @telefone, @historico
    )";

        DatabaseHelper.ExecuteNonQuery(query, cmd =>
        {
            cmd.Parameters.AddWithValue("@id", proximoId);
            cmd.Parameters.AddWithValue("@nome", users.Nome);
            cmd.Parameters.AddWithValue("@CPF", users.CPF);
            cmd.Parameters.AddWithValue("@historico", users.Historico);
            cmd.Parameters.AddWithValue("@telefone", string.IsNullOrEmpty(users.Telefone) ? DBNull.Value : users.Telefone);
        });

        Console.WriteLine("Usuário cadastrado com sucesso.");
        Thread.Sleep(1000);
        Console.Clear();
    }
    static void SelectUserOption()
    {
        while (true)
        {
            var option = AnsiConsole.Prompt(
            new SelectionPrompt<string>()
            .Title("Área Geral do Usuário: ")
            .PageSize(10)
            .MoreChoicesText("[grey](Selecione o dia: )[/]")
            .AddChoices(new[]
            {
                 "Cadastrar Usuário", "Atualizar Usuário", "Voltar"
            }));

            switch (option)
            {
                case "Cadastrar Usuário": CreateUser(); break;
                case "Atualizar Usuário": UpdateUser(); break;
                case "Voltar": Console.WriteLine("\nRetornando..."); Thread.Sleep(1000); Console.Clear(); return;

            }
            break;
        }


        static void UpdateUser()
        {
            ListUser();
            Users user = null;
            Console.Write("Insira o ID do cliente que você deseja alterar: ");
            if (int.TryParse(Console.ReadLine(), out int catchId))
            {
                string query = @"
            SELECT 
                id,
                nome,
                CPF,
                status,
                telefone, 
                historico
            FROM Clientes 
            WHERE id = @id";

                DatabaseHelper.ExecuteCommand(cmd =>
                {
                    cmd.CommandText = query;
                    cmd.Parameters.AddWithValue("@id", catchId);
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            user = new Users
                            {
                                Id = Convert.ToInt32(reader["id"]),
                                Nome = reader["nome"].ToString(),
                                Status = Convert.ToBoolean(reader["status"]),
                                Telefone = reader["telefone"].ToString(),
                                CPF = reader["CPF"].ToString()
                            };
                        }
                    }
                });

                if (user is not null)
                {
                    var updateClient = AnsiConsole.Prompt(
                        new SelectionPrompt<string>()
                        .Title("Qual o atributo que você deseja atualizar no cliente: ")
                        .PageSize(10)
                        .MoreChoicesText("[grey](Selecione o atributo: )[/]")
                        .AddChoices(new[]
                        {
                     "Nome","Telefone", "Status", "CPF", "Voltar"
                        }));

                    switch (updateClient)
                    {
                        case "Nome": UpdateName(); break;
                        case "Telefone": UpdatePhone(); break;
                        case "Status": UpdateStatus(); break;
                        case "CPF": UpdateCPF(); break;
                        case "Voltar": Console.WriteLine("\nRetornando..."); Thread.Sleep(1000); Console.Clear(); return;
                    }

                    void UpdateName()
                    {
                        string updateQuery = "UPDATE Clientes SET nome = @nome WHERE id = @id";
                        DatabaseHelper.ExecuteNonQuery(updateQuery, cmd =>
                        {
                            Console.WriteLine($"O Nome atual do cliente é: [{user.Nome}]");
                            Console.Write("\nDigite o Nome do Usuário: ");
                            string newName = Console.ReadLine();
                            cmd.Parameters.AddWithValue("@id", catchId);
                            cmd.Parameters.AddWithValue("@nome", newName);
                        });

                        Console.WriteLine("\n*** Nome do usuário atualizado com sucesso. ***");
                        Thread.Sleep(1000);
                        Console.Clear();
                    }

                    void UpdatePhone()
                    {
                        string updateQuery = "UPDATE Clientes SET telefone = @telefone WHERE id = @id";
                        DatabaseHelper.ExecuteNonQuery(updateQuery, cmd =>
                        {
                            Console.WriteLine($"\nO Telefone atual do cliente é: [{user.Telefone}]");
                            string newPhone = CreatePhone();
                            cmd.Parameters.AddWithValue("@id", catchId);
                            cmd.Parameters.AddWithValue("@telefone", newPhone);
                        });

                        Console.WriteLine("\n*** Telefone do usuário atualizado com sucesso. ***");
                        Thread.Sleep(1000);
                        Console.Clear();
                    }

                    void UpdateStatus()
                    {
                        var optionUser = AnsiConsole.Prompt(
                            new SelectionPrompt<string>()
                            .Title("Alteração de Status, deseja:")
                            .PageSize(10)
                            .MoreChoicesText("[grey](Selecione a alteração: )[/]")
                            .AddChoices(new[]
                            {
                        "Manter", "Ativo", "Inativo"
                            })
                        );

                        if (optionUser == "Manter")
                        {
                            Console.WriteLine($"Mantendo o Status: {user.Status}");
                        }
                        else if (optionUser == "Ativo")
                        {
                            if (user.Status)
                            {
                                Console.WriteLine("Usuário já está ativo!");
                            }
                            else
                            {
                                Console.WriteLine("Usuário ativado com sucesso!");
                                user.Status = true;
                            }
                        }
                        else if (optionUser == "Inativo")
                        {
                            if (!user.Status)
                            {
                                Console.WriteLine("Usuário já está inativo!");
                            }
                            else
                            {
                                Console.WriteLine("Usuário inativado com sucesso!");
                                user.Status = false;
                            }
                        }

                        string updateQuery = "UPDATE Clientes SET status = @status WHERE id = @id";
                        DatabaseHelper.ExecuteNonQuery(updateQuery, cmd =>
                        {
                            cmd.Parameters.AddWithValue("@id", catchId);
                            cmd.Parameters.AddWithValue("@status", user.Status);
                        });

                        Console.WriteLine("Status atualizado com sucesso!");
                        Thread.Sleep(1000);
                        Console.Clear();
                    }

                    void UpdateCPF()
                    {
                        string updateQuery = "UPDATE Clientes SET CPF = @CPF WHERE id = @id";
                        DatabaseHelper.ExecuteNonQuery(updateQuery, cmd =>
                        {
                            Console.WriteLine($"\nO CPF atual do cliente é: [{user.CPF}]");
                            string newCPF = CreateCPF();
                            cmd.Parameters.AddWithValue("@id", catchId);
                            cmd.Parameters.AddWithValue("@CPF", newCPF);
                        });

                        Console.WriteLine("\n*** CPF do usuário atualizado com sucesso. ***");
                        Thread.Sleep(1000);
                        Console.Clear();
                    }
                }
            }
        }
    }
    public static void SelectProductOption()
    {
        var option = AnsiConsole.Prompt(
            new SelectionPrompt<string>()
            .Title("Área Geral dos Produtos: ")
            .PageSize(10)
            .MoreChoicesText("[grey](Selecione o produto: )[/]")
            .AddChoices(new[]
            {
                 "Cadastrar Produto", "Atualizar Produto", "Voltar"
            }));

        switch (option)
        {
            case "Cadastrar Produto": CreateProduct(); break;
            case "Atualizar Produto": UpdateProduct(); break;
            case "Voltar": Console.WriteLine("\nRetornando..."); Thread.Sleep(1000); Console.Clear(); return;
        }

        static void CreateProduct()
        {
            Product produto = new Product();
            Console.Write("Insira a descrição do Produto: ");
            produto.Descricao = Console.ReadLine();
            Console.Write("Insira a Quantidade que há em estoque desse produto: ");
            if (int.TryParse(Console.ReadLine(), out int qtdAtual))
            {
                produto.Quantidade = qtdAtual;
            }
            else
            {
                Console.WriteLine("Insira uma quantidade válida para o produto!");
            }
            Console.Write("Insira o Preço de Venda desse produto: ");
            if (double.TryParse(Console.ReadLine(), out double precoVenda))
            {
                produto.PrecoVenda = precoVenda;
            }
            else
            {
                Console.WriteLine("Insira um Preço em R$ para o produto!");
            }

            using (SqlConnection connection = new(connectionString))
            {
                connection.Open();
                int proximoId;
                using (SqlCommand cmdNextId = new("SELECT ISNULL(MAX(idItem), 0) + 1 FROM Produtos", connection))
                {
                    proximoId = (int)cmdNextId.ExecuteScalar();
                }
                string query = @"insert into Produtos
                (
                	idItem, descricao, status, quantidade, precoVenda
                )
                values 
                ( 
                    @idItem, @descricao, 1, @quantidade, @precoVenda
                );";
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@idItem", proximoId);
                    command.Parameters.AddWithValue("@descricao", produto.Descricao);
                    command.Parameters.AddWithValue("@quantidade", produto.Quantidade);
                    command.Parameters.AddWithValue("@precoVenda", produto.PrecoVenda);

                    command.ExecuteNonQuery();
                    Console.WriteLine("Produto cadastrado com sucesso.");
                    connection.Close();
                    Thread.Sleep(1000);
                    Console.Clear();


                }
            }
        }
        static void UpdateProduct()
        {
            ListProduct();
            Product product = null;
            Console.WriteLine("Selecione o produto que você deseja atualizar: ");
            if (int.TryParse(Console.ReadLine(), out int catchId))
            {
                string query = @"
            SELECT idItem, Descricao, Quantidade, Status, precoVenda 
            FROM Produtos 
            WHERE idItem = @idItem";

                DatabaseHelper.ExecuteCommand(cmd =>
                {
                    cmd.CommandText = query;
                    cmd.Parameters.AddWithValue("@idItem", catchId);
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            product = new Product
                            {
                                IdItem = Convert.ToInt32(reader["idItem"]),
                                Descricao = reader["Descricao"].ToString(),
                                Status = Convert.ToBoolean(reader["Status"]),
                                Quantidade = Convert.ToInt32(reader["Quantidade"]),
                                PrecoVenda = Convert.ToDouble(reader["PrecoVenda"])
                            };
                        }
                    }
                });

                if (product is not null)
                {
                    var updateProduct = AnsiConsole.Prompt(
                        new SelectionPrompt<string>()
                        .Title("Qual o atributo que você deseja atualizar no produto: ")
                        .PageSize(10)
                        .MoreChoicesText("[grey](Selecione o atributo: )[/]")
                        .AddChoices(new[]
                        {
                     "Descrição","Quantidade", "Status", "PrecoVenda", "Voltar"
                        }));

                    switch (updateProduct)
                    {
                        case "Descrição": UpdateDesc(); break;
                        case "Quantidade": UpdateAmount(); break;
                        case "Status": UpdateStatus(); break;
                        case "PrecoVenda": UpdatePrice(); break;
                        case "Voltar": Console.WriteLine("\nRetornando..."); Thread.Sleep(1000); Console.Clear(); return;
                    }

                    void UpdateDesc()
                    {
                        Console.WriteLine($"A descrição atual do produto é [{product.Descricao}]");
                        Console.Write("Insira a nova descrição do produto: ");
                        string newDesc = Console.ReadLine();

                        string updateQuery = @"UPDATE Produtos SET descricao = @descricao WHERE idItem = @idItem";
                        DatabaseHelper.ExecuteNonQuery(updateQuery, cmd =>
                        {
                            cmd.Parameters.AddWithValue("@idItem", catchId);
                            cmd.Parameters.AddWithValue("@descricao", newDesc);
                        });

                        Console.WriteLine("\n*** Descrição do produto alterada com sucesso! ***");
                        Thread.Sleep(1000);
                        Console.Clear();
                    }

                    void UpdateAmount()
                    {
                        Console.WriteLine($"A Quantidade atual do produto é [{product.Quantidade} UN]");
                        Console.Write("Insira a quantidade real no estoque: ");
                        if (int.TryParse(Console.ReadLine(), out int newAmount))
                        {
                            string updateQuery = @"UPDATE Produtos SET quantidade = @quantidade WHERE idItem = @idItem";
                            DatabaseHelper.ExecuteNonQuery(updateQuery, cmd =>
                            {
                                cmd.Parameters.AddWithValue("@idItem", catchId);
                                cmd.Parameters.AddWithValue("@quantidade", newAmount);
                            });

                            Console.WriteLine("\n*** Quantidade do produto alterada com sucesso! ***");
                            Thread.Sleep(1000);
                            Console.Clear();
                        }
                        else
                        {
                            Console.WriteLine("Insira uma quantidade válida por favor.");
                            UpdateAmount();
                        }
                    }

                    void UpdateStatus()
                    {
                        var optionUser = AnsiConsole.Prompt(
                            new SelectionPrompt<string>()
                            .Title("Alteração de Status, deseja:")
                            .PageSize(10)
                            .MoreChoicesText("[grey](Selecione a alteração: )[/]")
                            .AddChoices(new[]
                            {
                        "Manter", "Ativo", "Inativo"
                            })
                        );

                        if (optionUser == "Manter")
                        {
                            Console.WriteLine($"Mantendo o Status: {product.Status}");
                        }
                        else if (optionUser == "Ativo")
                        {
                            if (product.Status)
                            {
                                Console.WriteLine("Produto já está ativo!");
                            }
                            else
                            {
                                Console.WriteLine("Produto ativado com sucesso!");
                                product.Status = true;
                            }
                        }
                        else if (optionUser == "Inativo")
                        {
                            if (!product.Status)
                            {
                                Console.WriteLine("Produto já está inativo!");
                            }
                            else
                            {
                                Console.WriteLine("Produto inativado com sucesso!");
                                product.Status = false;
                            }
                        }

                        string updateQuery = @"UPDATE Produtos SET status = @status WHERE idItem = @idItem";
                        DatabaseHelper.ExecuteNonQuery(updateQuery, cmd =>
                        {
                            cmd.Parameters.AddWithValue("@idItem", catchId);
                            cmd.Parameters.AddWithValue("@status", product.Status);
                        });

                        Console.WriteLine("Status atualizado com sucesso!");
                        Thread.Sleep(1000);
                        Console.Clear();
                    }

                    void UpdatePrice()
                    {
                        Console.WriteLine($"O preço atual do produto é [R${product.PrecoVenda}]");
                        Console.Write("Insira o novo preço do produto: R$");
                        if (double.TryParse(Console.ReadLine(), out double newPrice))
                        {
                            string updateQuery = @"UPDATE Produtos SET precoVenda = @precoVenda WHERE idItem = @idItem";
                            DatabaseHelper.ExecuteNonQuery(updateQuery, cmd =>
                            {
                                cmd.Parameters.AddWithValue("@idItem", catchId);
                                cmd.Parameters.AddWithValue("@precoVenda", newPrice);
                            });

                            Console.WriteLine("\n*** Preço do produto alterado com sucesso! ***");
                            Thread.Sleep(1000);
                            Console.Clear();
                        }
                        else
                        {
                            Console.WriteLine("Por favor digite um preço válido!");
                            UpdatePrice();
                        }
                    }
                }
            }
        }
    }
}
public class Users
{
    public int Id { get; set; }
    public string? Nome { get; set; }
    public string CPF { get; set; }
    public string Telefone { get; set; }
    public bool Status { get; set; }
    public int Historico { get; set; }
    public override string ToString()
    {
        return $"\n*************************" +
            $"\nID: {Id}" +
            $"\nNome: {Nome}" +
            $"\nCPF: {CPF}" +
            $"\nTelefone: {Telefone}" +
            $"\nStatus: {(Status ? "Ativo" : "Inativo")}" +
            $"\nHistórico: {Historico}" +
            $"\n*************************";
    }
}
public class Product
{
    public int IdItem { get; set; }
    public string Descricao { get; set; }
    public bool Status { get; set; }
    public int Quantidade { get; set; }
    public double PrecoVenda { get; set; }


    public override string ToString()
    {
        return $"\n*************************" +
            $"\nCódigo do produto: {IdItem}" +
            $"\nDescrição do Produto: {Descricao}" +
            $"\nStatus: {(Status ? "Ativo" : "Inativo")}" +
            $"\nQuantidade: {Quantidade} UN" +
            $"\nPreço de Venda: R${PrecoVenda}" +
            $"\n*************************";
    }
}
public class Fila : Users
{
    public int IdFila { get; set; }
    public int Qtd { get; set; }
}
public class Pista
{
    public int idPista { get; set; }
    public bool Status { get; set; }

    public override string ToString()
    {
        return $"\nPista Número: {idPista}" +
            $"\nStatus: {(Status ? "Livre" : "Ocupada")}\n";
    }
}
public static class DatabaseHelper
{
    private static readonly string connectionString = "Server=DESKTOP-UFKML55;Database=Boliche1;User Id=sa;Password=Vector5**;";

    public static SqlConnection GetConnection()
    {
        SqlConnection connection = new SqlConnection(connectionString);
        connection.Open();
        return connection;
    }

    public static void ExecuteCommand(Action<SqlCommand> commandAction)
    {
        using (SqlConnection connection = GetConnection())
        using (SqlCommand command = connection.CreateCommand())
        {
            commandAction(command);
        }
    }

    public static ExecuteAction ExecuteScalar<ExecuteAction>(Func<SqlCommand, ExecuteAction> commandAction)
    {
        using (SqlConnection connection = GetConnection())
        using (SqlCommand command = connection.CreateCommand())
        {
            return commandAction(command);
        }
    }

    public static void ExecuteNonQuery(string query, Action<SqlCommand> parameterAction)
    {
        ExecuteCommand(cmd =>
        {
            cmd.CommandText = query;
            parameterAction(cmd);
            cmd.ExecuteNonQuery();
        });
    }

    public static SqlDataReader ExecuteReader(string query, Action<SqlCommand> parameterAction)
    {
        SqlConnection connection = GetConnection();
        using (SqlCommand command = connection.CreateCommand())
        {
            command.CommandText = query;
            parameterAction(command);
            return command.ExecuteReader(CommandBehavior.CloseConnection);
        }
    }
}
public class PricingCalculator
{
    private static readonly TimeSpan DayStart = new TimeSpan(12, 0, 0);
    private static readonly TimeSpan EveningStart = new TimeSpan(17, 0, 0);
    private static readonly TimeSpan EndTime = new TimeSpan(22, 0, 0);

    // Preços para Segunda a Quinta-feira
    private static readonly decimal DayRateWeekday = 100.00m;
    private static readonly decimal EveningRateWeekday = 120.00m;

    // Preços para Sexta-feira a Domingo
    private static readonly decimal DayRateWeekend = 110.00m;
    private static readonly decimal EveningRateWeekend = 130.00m;

    // Adicional por minuto
    private static readonly decimal AdditionalMinuteCharge = 1.00m;

    public static decimal CalculateTotalPrice(DateTime startTime, DateTime endTime, decimal productTotal)
    {
        // Calcula o valor do tempo
        var duration = endTime - startTime;
        decimal timeCharge = CalculateTimeCharge(startTime, endTime);

        // Calcula o total
        return timeCharge + productTotal;
    }

    private static decimal CalculateTimeCharge(DateTime startTime, DateTime endTime)
    {
        decimal totalCharge = 0.0m;
        DateTime currentStart = startTime;

        while (currentStart < endTime)
        {
            var dayOfWeek = currentStart.DayOfWeek;
            var currentTime = currentStart.TimeOfDay;

            if (dayOfWeek >= DayOfWeek.Monday && dayOfWeek <= DayOfWeek.Thursday)
            {
                // Segunda a Quinta-feira
                if (currentTime < EveningStart)
                {
                    totalCharge += DayRateWeekday;
                }
                else
                {
                    totalCharge += EveningRateWeekday;
                }
            }
            else
            {
                // Sexta-feira a Domingo
                if (currentTime < EveningStart)
                {
                    totalCharge += DayRateWeekend;
                }
                else
                {
                    totalCharge += EveningRateWeekend;
                }
            }

            // Move para o próximo intervalo
            currentStart = currentStart.Date + (currentTime < EveningStart ? EveningStart : EndTime);

            // Adiciona cobrança adicional se estiver passando do horário final
            if (currentStart > endTime)
            {
                var extraTime = endTime - (currentStart - (currentStart.Date + (currentTime < EveningStart ? EveningStart : EndTime)));
                totalCharge += AdditionalMinuteCharge * (decimal)extraTime.Second;
            }
        }

        return totalCharge;
    }
}
