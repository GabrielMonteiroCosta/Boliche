using Spectre.Console;
using Spectre.Console.Cli;
using System.Data.SqlClient;
using System.Linq.Expressions;
using System.Reflection.Metadata.Ecma335;
using static Program;

internal class Program
{
    const string connectionString = "Server=DESKTOP-DB5M39P;Database=Boliche;User Id=sa;Password=Vector5**;";
    private static void Main(string[] args)
    {
        List<Users> clientes = new();
        List<Product> products = new();

        while (true)
        {
            Console.WriteLine("Bem-Vindo ao Gaboliche!" +
                "\n(1) Coloque as pessoas na pista para jogar" +
                "\n(2) Cadastrar, Atualizar ou Ativar/Inativar Usuários" +
                "\n(3) Cadastrar, Atualizar ou Ativar/Inativar Produtos" +
                "\n(4) Listar Usuários, Cardápio, Promoções e a Fila de Espera" +
                "\n(0) Fechar e Sair.");

            Console.Write("\nSelecione uma das opções: ");
            string option = Console.ReadLine();

            switch (option)
            {
                case "1": CheckMembers(); CheckTime(); ; break;
                case "2": SelectUserOption(); break;
                case "3": SelectProductOption(); break;
                case "4": PrintLists(); break;
                case "0": Console.WriteLine("Encerrando o programa..."); return;
                default: Console.WriteLine("Insira uma opção válida!"); break;
            }
        }
    }
    static void CheckMembers()
    {
        Console.Write("\nPor favor insira quantas pessoas vão participar (MÁX 6 PESSOAS):");
        while (true)
        {
            if (int.TryParse(Console.ReadLine(), out int participantes))
            {
                if (participantes <= 5 && participantes > 0)
                {
                    Console.WriteLine($"Separando equipamento para {participantes} pessoas, deseja fazer o nosso cadastro Gaboliche-Fã?\n" +
                        "Usuários cadastrados no nosso sistema ganham 15% de desconto na sexta vez que vem aqui!");
                    break;
                }
                if (participantes > 6)
                {
                    Console.WriteLine("Mais do que 6(Seis) pessoas não são suportadas, o limite são 6 Pistas!");
                    Console.WriteLine($"Você quer entrar com 6 pessoas, lembrando que os outros {participantes - 6} participantes entraram em uma fila de espera. ");
                    Console.WriteLine("Continuar com 6 participantes(S/N): ");
                    string continuaComFila = Console.ReadLine();
                    if ("s".Equals(continuaComFila, StringComparison.OrdinalIgnoreCase))
                    {
                        Console.WriteLine("Continuando com 6 pessoas!");
                        continue;
                    }
                    if ("n".Equals(continuaComFila, StringComparison.OrdinalIgnoreCase))
                    {
                        Console.Write("Ok, muito obrigado pela compreensão!");
                        return;
                    }
                }
                if (participantes == 6)
                {
                    Console.WriteLine("Separando equipamento para 6 pessoas, 5% de desconto aplicado para cada um no valor final!");
                    break;
                }
            }
        }
    }
    static void CheckTime()
    {
        var day = AnsiConsole.Prompt(
        new SelectionPrompt<string>()
        .Title("Qual é o dia da semana? ")
        .PageSize(10)
        .MoreChoicesText("[grey](Selecione o dia: )[/]")
        .AddChoices(new[]
        {
             "Segunda-Feira","Terça-Feira","Quarta-Feira","Quinta-Feira","Sexta-Feira","Sábado","Domingo"
        }));

        DateTime horaAtual = DateTime.Now;
        Console.WriteLine($"Hoje é dia [{horaAtual}] [{day}]");

    }
    public static string? CreateCPF()
    {
        static string? CheckCPF()
        {
            Console.WriteLine("Digite o CPF: ");
            string? validar = Console.ReadLine();
            if (!Equals(validar?.Length, 11))
            {
                Console.WriteLine("Não foi possível registrar esse CPF, parece que há menos números do que deveria!");
                CheckCPF();
            }
            return validar;
        }

        string? cpf = CheckCPF();
        using SqlConnection connect = new(connectionString);
        connect.Open();
        using SqlCommand command = connect.CreateCommand();
        command.CommandText = $"Select count(CPF) from Clientes where CPF = @CPF";
        command.Parameters.AddWithValue("CPF", string.IsNullOrEmpty(cpf) ? DBNull.Value : cpf);
        var obj = (int)command.ExecuteScalar();
        connect.Close();
        if (obj > 0)
        {
            throw new Exception("Esse número de CPF já existe cadastrado no Gaboliche!");
        }
        return cpf;
    }
    public static string? CreatePhone()
    {
        static string? CheckPhone()
        {
            Console.Write("Digite o número de Telefone: ");
            string? validar = Console.ReadLine();
            if (!Equals(validar?.Length, 11))
            {
                Console.WriteLine("Não foi possível registrar esse número de telefone, não há 11 digitos nele.");
                CheckPhone();
            }
            return validar;
        }
        string? phone = CheckPhone();
        using (SqlConnection connect = new(connectionString))
        {
            connect.Open();
            using (SqlCommand command = connect.CreateCommand())
            {
                command.CommandText = $"Select count(telefone) from Clientes where telefone = @telefone";
                command.Parameters.AddWithValue("telefone", string.IsNullOrEmpty(phone) ? DBNull.Value : phone);
                var obj = (int)command.ExecuteScalar();
                connect.Close();
                if (obj > 0)
                {
                    throw new Exception("Esse número de CPF já existe cadastrado no Gaboliche!");
                }
                return phone;
            }
        }

    }
    public static void ListUser()
    {
        List<Users> listUsers = new();
        using (SqlConnection connection = new(connectionString))
        {
            connection.Open();
            string query = @"select
                        id, nome, CPF, status, telefone, historico from Clientes";
            using (SqlCommand command = new(query, connection))
            {
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Users users = new Users();
                        users.Id = Convert.ToInt32(reader["id"]);
                        users.Nome = reader["nome"].ToString();
                        users.CPF = reader["CPF"].ToString();
                        users.Telefone = reader["telefone"].ToString();
                        users.Status = Convert.ToBoolean(reader["status"]);
                        users.Historico = Convert.ToInt32(reader["historico"]);
                        listUsers.Add(users);
                    }
                    foreach (var users in listUsers)
                    {
                        Console.WriteLine(users);
                    }
                    connection.Close();
                }
            }
        }
    }
    public static void ListProduct()
    {
        List<Product> listProduct = new();
        using (SqlConnection connection = new(connectionString))
        {
            connection.Open();
            string query = @"select
                        idItem,
                        descricao,
                        status,
                        quantidade,
                        precoVenda
                        from Produtos";
            using (SqlCommand command = new(query, connection))
            {
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        Product productString = new();
                        productString.IdItem = Convert.ToInt32(reader["idItem"]);
                        productString.Descricao = reader["descricao"].ToString();
                        productString.Status = Convert.ToBoolean(reader["Status"]);
                        productString.Quantidade = Convert.ToInt32(reader["quantidade"]);
                        productString.PrecoVenda = Convert.ToDouble(reader["precoVenda"]);
                        listProduct.Add(productString);
                    }
                    foreach (var products in listProduct)
                    {
                        Console.WriteLine(products);
                    }
                    connection.Close();
                }
            }
        }
    }
    public static void PrintLists()
    {
        while (true)
        {
            Console.WriteLine("" +
                "\n(1) Listar Produtos" +
                "\n(2) Listar Usuários" +
                "\n(3) Listar Promoções" +
                "\n(4) Listar Fila de Espera" +
                "\n(5) Listar Preços/Horários" +
                "\n(0) <- Voltar ao menu anterior");

            Console.Write("Selecione uma das opções acima: ");

            string option = Console.ReadLine();
            switch (option)
            {
                case "1": ListProduct(); break;
                case "2": ListUser(); break;
                case "3": ListPromotions(); break;
                case "4": ListQueue(); break;
                case "5": PriceTable(); break;
                case "0": Console.WriteLine("\nRetornando..."); Thread.Sleep(1000); Console.Clear(); return;
                default: Console.WriteLine("Por favor digite uma opção válida!"); break;
            }

            static void ListPromotions()
            {
                Console.WriteLine("\n********** Promoções disponíveis atualmente **********\n");
                Console.WriteLine("  > Fidelidade: Após a 5° vez no Gaboliche, ganhe 15% de Desconto na sua próxima vinda!");
                Console.WriteLine("  > Cupom Galera da Pesada: 10% de Desconto para pista com 6 pessoas.");
                Console.WriteLine("  > Cupom Pais e Filhos: 5% de Desconto.");

            }
            static void ListQueue()
            {
                Console.WriteLine("Sem fila.");
            }
            static void PriceTable()
            {
                DateTime horaAtual = DateTime.Now;
                Console.WriteLine("\n|-----------------------|\n|Bem-Vindo ao Gaboliche!|\n|-----------------------|");
                Console.WriteLine("\n***Veja a nossa tabela de preços de Segunda até Quinta-Feira***");
                Console.WriteLine("\n|-----------------------------|" +
                    "\n|12h00 até às 17h00 = R$100,00|" +
                    "\n|17h00 até às 22h00 = R$120,00|");
                Console.WriteLine("|-----------------------------|");
                Console.WriteLine("\nVALOR FIXO NO TÊNIS E MEIAS: R$10,00");

                Console.WriteLine("\n***Veja a nossa tabela de preços de Sexta à Domingo (Vésperas e Feriados)***");
                Console.WriteLine("\n|-----------------------------|" +
                    "\n|12h00 até às 17h00 = R$110,00|" +
                    "\n|17h00 até às 22h00 = R$130,00|");
                Console.WriteLine("|-----------------------------|");
                Console.WriteLine("\nVALOR FIXO NO TÊNIS E MEIAS: R$10,00");
            }
        }
    }
    static void SelectUserOption()
    {
        while (true)
        {
            var option = AnsiConsole.Prompt(
            new SelectionPrompt<string>()
            .Title("Área Geral do Usuário: ")
            .PageSize(10)
            .MoreChoicesText("[grey](Selecione o dia: )[/]")
            .AddChoices(new[]
            {
                 "Cadastrar Usuário", "Atualizar Usuário", "Voltar"
            }));

            switch (option)
            {
                case "Cadastrar Usuário": CreateUser(); break;
                case "Atualizar Usuário": UpdateUser(); break;
                case "Voltar": Console.WriteLine("\nRetornando..."); Thread.Sleep(1000); Console.Clear(); return;

            }
            break;
        }

        static void CreateUser()
        {
            Users users = new();
            try
            {
                users.CPF = CreateCPF();
            }
            catch
            {
                return;
            }
            Console.Write("Insira o Nome do Player: ");
            users.Nome = Console.ReadLine();
            Console.Write("Insira o telefone do cliente (DDD): ");
            users.Telefone = Console.ReadLine();
            users.Historico += 1;

            using (SqlConnection connect = new(connectionString))
            {
                connect.Open();
                int proximoId;
                using (SqlCommand cmdNextId = new("SELECT ISNULL(MAX(id), 0) + 1 FROM Clientes", connect))
                {
                    proximoId = (int)cmdNextId.ExecuteScalar();
                }
                string query = @"
                insert into Clientes
                (
                	Id, Nome, CPF, Status, Telefone, Historico
                )
                values 
                (
                	@id, @nome, @CPF, 1, @telefone, @historico
                )";
                using (SqlCommand command = new(query, connect))
                {
                    command.Parameters.AddWithValue("@id", proximoId);
                    command.Parameters.AddWithValue("@nome", users.Nome);
                    command.Parameters.AddWithValue("@CPF", users.CPF);
                    command.Parameters.AddWithValue("@historico", users.Historico);
                    command.Parameters.AddWithValue("@telefone", string.IsNullOrEmpty(users.Telefone) ? DBNull.Value : users.Telefone);

                    command.ExecuteNonQuery();
                    Console.WriteLine("Usuário cadastrado com sucesso.");
                    connect.Close();
                    Thread.Sleep(1000);
                    Console.Clear();
                }
            }
        }
        static void UpdateUser()
        {
            ListUser();
            Users user = null;
            Console.Write("Insira o ID do cliente que você deseja alterar: ");
            if (int.TryParse(Console.ReadLine(), out int catchId))
            {
                string query = @"select 
	                id,
                    nome,
	                CPF,
	                status,
	                telefone, 
	                historico
                    from Clientes where id = @id";
                using (SqlConnection connection = new(connectionString))
                {
                    connection.Open();
                    using (SqlCommand cmd = new(query, connection))
                    {
                        cmd.Parameters.AddWithValue("@id", catchId); //Atribuindo o ID digitado ao @id no db.
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                user = new Users
                                {
                                    Id = Convert.ToInt32(reader["id"]),
                                    Nome = reader["nome"].ToString(),
                                    Status = Convert.ToBoolean(reader["status"]),
                                    Telefone = reader["telefone"].ToString(),
                                    CPF = reader["CPF"].ToString()
                                };
                            }
                        }
                    }
                    connection.Close();
                    if (user is not null)
                    {
                        var updateClient = AnsiConsole.Prompt(
                            new SelectionPrompt<string>()
                            .Title("Qual o atributo que você deseja atualizar no cliente: ")
                            .PageSize(10)
                            .MoreChoicesText("[grey](Selecione o atributo: )[/]")
                            .AddChoices(new[]
                            {
                                 "Nome","Telefone", "Status", "CPF", "Voltar"
                            }));

                        switch (updateClient)
                        {
                            case "Nome": UpdateName(); break;
                            case "Telefone": UpdatePhone(); break;
                            case "Status": UpdateStatus(); break;
                            case "CPF": UpdateCPF(); break;
                            case "Voltar": Console.WriteLine("\nRetornando..."); Thread.Sleep(1000); Console.Clear(); return;
                        }

                        void UpdateName()
                        {
                            query = "UPDATE Clientes SET nome = @nome WHERE id = @id";
                            using (SqlCommand command = new(query, connection))
                            {
                                connection.Open();
                                Console.WriteLine($"O Nome atual do cliente é: [{user.Nome}]");
                                Console.Write("\nDigite o Nome do Usuário: ");
                                string newName = Console.ReadLine();
                                command.Parameters.AddWithValue("@id", catchId);
                                command.Parameters.AddWithValue("@nome", newName);
                                int updateName = command.ExecuteNonQuery();
                                Console.WriteLine(updateName > 0 ? "\n*** Nome do usuário atualizado com sucesso. ***" : "Erro ao atualizar o nome.");
                                connection.Close();
                                Thread.Sleep(1000);
                                Console.Clear();
                            }
                        }
                        void UpdatePhone()
                        {
                            query = "UPDATE Clientes SET telefone = @telefone WHERE id = @id";
                            using (SqlCommand command = new(query, connection))
                            {
                                connection.Open();
                                Console.WriteLine($"\nO Telefone atual do cliente é: [{user.Telefone}]");
                                string newPhone = CreatePhone();
                                command.Parameters.AddWithValue("@id", catchId);
                                command.Parameters.AddWithValue("@telefone", newPhone);
                                object updatePhone = command.ExecuteScalar();
                                connection.Close();
                                Thread.Sleep(1000);
                                Console.Clear();
                            }
                        }
                        void UpdateStatus()
                        {
                            // Definindo a query de atualização
                            string query = "UPDATE Clientes SET status = @status WHERE id = @id";

                            // Usando "using" para garantir que a conexão seja fechada corretamente
                            using (SqlCommand command = new SqlCommand(query, connection))
                            {
                                try
                                {
                                    // Abrindo a conexão
                                    connection.Open();

                                    // Opções de escolha do usuário
                                    var optionUser = AnsiConsole.Prompt(
                                        new SelectionPrompt<string>()
                                        .Title("Alteração de Status, deseja:")
                                        .PageSize(10)
                                        .MoreChoicesText("[grey](Selecione a alteração: )[/]")
                                        .AddChoices(new[]
                                        {
                                            "Manter", "Ativo", "Inativo"
                                        })
                                    );

                                    // Determinando a ação com base na escolha do usuário
                                    if (optionUser == "Manter")
                                    {
                                        Console.WriteLine($"Mantendo o Status: {user.Status}");
                                    }
                                    else if (optionUser == "Ativo")
                                    {
                                        if (user.Status is true)
                                        {
                                            Console.WriteLine("Usuário já está ativo!");
                                        }
                                        else
                                        {
                                            Console.WriteLine("Usuário ativado com sucesso!");
                                            user.Status = true;
                                        }
                                    }
                                    else if (optionUser == "Inativo")
                                    {
                                        if (user.Status is false)
                                        {
                                            Console.WriteLine("Usuário já está inativo!");
                                        }
                                        else
                                        {
                                            Console.WriteLine("Usuário inativado com sucesso!");
                                            user.Status = false;
                                        }
                                    }

                                    command.Parameters.AddWithValue("@id", catchId);
                                    command.Parameters.AddWithValue("@status", user.Status);

                                    int updateStatus = command.ExecuteNonQuery();

                                    if (updateStatus > 0)
                                    {
                                        Console.WriteLine("Status atualizado com sucesso!");
                                    }
                                    else
                                    {
                                        Console.WriteLine("Falha ao atualizar o status no banco de dados.");
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine("Ocorreu um erro: " + ex.Message);
                                }
                                finally
                                {
                                    connection.Close();
                                    Thread.Sleep(1000);
                                    Console.Clear();
                                }
                            }
                        }
                        void UpdateCPF()
                        {
                            query = "UPDATE Clientes SET CPF = @CPF WHERE id = @id";
                            using (SqlCommand command = new(query, connection))
                            {
                                connection.Open();
                                Console.WriteLine($"\nO CPF atual do cliente é: [{user.CPF}]");
                                string newCPF = CreateCPF();
                                command.Parameters.AddWithValue("@id", catchId);
                                command.Parameters.AddWithValue("@CPF", newCPF);
                                int updateCPF = command.ExecuteNonQuery();
                                Console.WriteLine(updateCPF > 0 ? "\n*** CPF do usuário atualizado com sucesso. ***" : "Erro ao atualizar o CPF do usuário.");
                                connection.Close();
                                Thread.Sleep(1000);
                                Console.Clear();
                            }

                        }
                    }
                }
            }
        }
    }
    public static void SelectProductOption()
    {
        var option = AnsiConsole.Prompt(
            new SelectionPrompt<string>()
            .Title("Área Geral dos Produtos: ")
            .PageSize(10)
            .MoreChoicesText("[grey](Selecione o produto: )[/]")
            .AddChoices(new[]
            {
                 "Cadastrar Produto", "Atualizar Produto", "Voltar"
            }));

        switch (option)
        {
            case "Cadastrar Produto": CreateProduct(); break;
            case "Atualizar Produto": UpdateProduct(); break;
            case "Voltar": Console.WriteLine("\nRetornando..."); Thread.Sleep(1000); Console.Clear(); return;
        }

        static void CreateProduct()
        {
            Product produto = new Product();
            Console.Write("Insira a descrição do Produto: ");
            produto.Descricao = Console.ReadLine();
            Console.Write("Insira a Quantidade que há em estoque desse produto: ");
            if (int.TryParse(Console.ReadLine(), out int qtdAtual))
            {
                produto.Quantidade = qtdAtual;
            }
            else
            {
                Console.WriteLine("Insira uma quantidade válida para o produto!");
            }
            Console.Write("Insira o Preço de Venda desse produto: ");
            if (double.TryParse(Console.ReadLine(), out double precoVenda))
            {
                produto.PrecoVenda = precoVenda;
            }
            else
            {
                Console.WriteLine("Insira um Preço em R$ para o produto!");
            }

            using (SqlConnection connection = new(connectionString))
            {
                connection.Open();
                int proximoId;
                using (SqlCommand cmdNextId = new("SELECT ISNULL(MAX(idItem), 0) + 1 FROM Produtos", connection))
                {
                    proximoId = (int)cmdNextId.ExecuteScalar();
                }
                string query = @"insert into Produtos
                (
                	idItem, descricao, status, quantidade, precoVenda
                )
                values 
                ( 
                    @idItem, @descricao, 1, @quantidade, @precoVenda
                );";
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@idItem", proximoId);
                    command.Parameters.AddWithValue("@descricao", produto.Descricao);
                    command.Parameters.AddWithValue("@quantidade", produto.Quantidade);
                    command.Parameters.AddWithValue("@precoVenda", produto.PrecoVenda);

                    command.ExecuteNonQuery();
                    Console.WriteLine("Produto cadastrado com sucesso.");
                    connection.Close();
                    Thread.Sleep(1000);
                    Console.Clear();


                }
            }
        }
        static void UpdateProduct()
        {
            ListProduct();
            Product product = null;
            Console.WriteLine("Selecione o produto que você deseja atualizar: ");
            if (int.TryParse(Console.ReadLine(), out int catchId))
            {
                string query = @"
                    select idItem, Descricao, Quantidade, Status, precoVenda from Produtos where idItem = @idItem";
                using (SqlConnection connection = new(connectionString))
                {
                    connection.Open();
                    using (SqlCommand cmd = new(query, connection))
                    {
                        cmd.Parameters.AddWithValue("@idItem", catchId);
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                product = new Product
                                {
                                    IdItem = Convert.ToInt32(reader["idItem"]),
                                    Descricao = reader["Descricao"].ToString(),
                                    Status = Convert.ToBoolean(reader["Status"]),
                                    Quantidade = Convert.ToInt32(reader["Quantidade"]),
                                    PrecoVenda = Convert.ToDouble(reader["PrecoVenda"])
                                };
                            }
                        }
                    }
                    connection.Close();
                    if (product is not null)
                    {
                        var updateProduct = AnsiConsole.Prompt(
                            new SelectionPrompt<string>()
                            .Title("Qual o atributo que você deseja atualizar no produto: ")
                            .PageSize(10)
                            .MoreChoicesText("[grey](Selecione o atributo: )[/]")
                            .AddChoices(new[]
                            {
                                 "Descrição","Quantidade", "Status", "PrecoVenda", "Voltar"
                            }));

                        switch (updateProduct)
                        {
                            case "Descrição": UpdateDesc(); break;
                            case "Quantidade": UpdateAmount(); break;
                            case "Status": UpdateStatus(); break;
                            case "PrecoVenda": UpdatePrice(); break;
                            case "Voltar": Console.WriteLine("\nRetornando..."); Thread.Sleep(1000); Console.Clear(); return;
                        }
                        void UpdateDesc()
                        {
                            Console.WriteLine($"A descrição atual do produto é [{product.Descricao}]");
                            Console.Write("Insira a nova descrição do produto: ");
                            string newDesc = Console.ReadLine();

                            using (SqlConnection connection = new(connectionString))
                            {
                                connection.Open();
                                string query = @"Update Produtos SET descricao = @descricao WHERE @idItem = idItem";
                                using (SqlCommand cmd = new(query, connection))
                                {
                                    cmd.Parameters.AddWithValue("@idItem", catchId);
                                    cmd.Parameters.AddWithValue("@descricao", newDesc);
                                    int updateDesc = cmd.ExecuteNonQuery();
                                    Console.WriteLine(updateDesc > 0 ? "\n*** Descrição do produto alterada com sucesso! ***" : "Erro ao atualizar a descrição!");
                                    connection.Close();
                                    Thread.Sleep(1000);
                                    Console.Clear();
                                    return;
                                }
                            }
                        }
                        void UpdateAmount()
                        {
                            Console.WriteLine($"A Quantidade atual do produto é [{product.Quantidade} UN]");
                            Console.Write("Insira a quantidade real no estoque: ");
                            if (int.TryParse(Console.ReadLine(), out int newAmount))
                            {
                                using (SqlConnection connection = new(connectionString))
                                {
                                    connection.Open();
                                    string query = @"UPDATE Produtos SET quantidade = @quantidade WHERE idItem = @idItem";
                                    using (SqlCommand cmd = new(query, connection))
                                    {
                                        cmd.Parameters.AddWithValue("@idItem", catchId);
                                        cmd.Parameters.AddWithValue("@quantidade", newAmount);
                                        int updateAmount = cmd.ExecuteNonQuery();
                                        Console.WriteLine(updateAmount > 0 ? "\n*** Quantidade do produto alterada com sucesso! ***" : "Erro ao atualizar a quantidade!");
                                        connection.Close();
                                        Thread.Sleep(1000);
                                        Console.Clear();
                                        return;
                                    }
                                }
                            }
                            Console.WriteLine("Insira uma quantidade válida por favor.");
                            UpdateAmount();
                        }
                        void UpdateStatus()
                        {
                            string query = "UPDATE Produtos SET status = @status WHERE idItem = @idItem";

                            using (SqlCommand command = new SqlCommand(query, connection))
                            {
                                try
                                {
                                    connection.Open();

                                    var optionUser = AnsiConsole.Prompt(
                                        new SelectionPrompt<string>()
                                        .Title("Alteração de Status, deseja:")
                                        .PageSize(10)
                                        .MoreChoicesText("[grey](Selecione a alteração: )[/]")
                                        .AddChoices(new[]
                                        {
                                            "Manter", "Ativo", "Inativo"
                                        })
                                    );

                                    if (optionUser == "Manter")
                                    {
                                        Console.WriteLine($"Mantendo o Status: {product.Status}");
                                    }
                                    else if (optionUser == "Ativo")
                                    {
                                        if (product.Status is true)
                                        {
                                            Console.WriteLine("Usuário já está ativo!");
                                        }
                                        else
                                        {
                                            Console.WriteLine("Usuário ativado com sucesso!");
                                            product.Status = true;
                                        }
                                    }
                                    else if (optionUser == "Inativo")
                                    {
                                        if (product.Status is false)
                                        {
                                            Console.WriteLine("Usuário já está inativo!");
                                        }
                                        else
                                        {
                                            Console.WriteLine("Usuário inativado com sucesso!");
                                            product.Status = false;
                                        }
                                    }

                                    command.Parameters.AddWithValue("@idItem", catchId);
                                    command.Parameters.AddWithValue("@status", product.Status);

                                    int updateStatus = command.ExecuteNonQuery();

                                    if (updateStatus > 0)
                                    {
                                        Console.WriteLine("Status atualizado com sucesso!");
                                    }
                                    else
                                    {
                                        Console.WriteLine("Falha ao atualizar o status no banco de dados.");
                                    }
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine("Ocorreu um erro: " + ex.Message);
                                }
                                finally
                                {
                                    Thread.Sleep(1000);
                                    Console.Clear();
                                    connection.Close();
                                }
                            }
                        }
                        void UpdatePrice()
                        {
                            Console.WriteLine($"O preço atual do produto é [R${product.PrecoVenda}]");
                            Console.Write("Insira o novo preço do produto: R$");
                            if (double.TryParse(Console.ReadLine(), out double newPrice))
                            {
                                using (SqlConnection connection = new(connectionString))
                                {
                                    connection.Open();
                                    string query = @"UPDATE Produtos SET precoVenda = @precoVenda WHERE idItem = @idItem";
                                    using (SqlCommand cmd = new SqlCommand(query, connection))
                                    {
                                        cmd.Parameters.AddWithValue("@idItem", catchId);
                                        cmd.Parameters.AddWithValue("@precoVenda", newPrice);
                                        int updatePrice = cmd.ExecuteNonQuery();
                                        Console.WriteLine(updatePrice > 0 ? "\n*** Preço do produto alterada com sucesso! ***" : "Erro ao atualizar o Preço do Produto!");
                                        connection.Close();
                                        Thread.Sleep(1000);
                                        Console.Clear();
                                        return;
                                    }
                                }
                            }
                            Console.WriteLine("Por favor digite um preço válido!");
                            UpdatePrice();
                        }
                    }
                }
            }
        }
    }
    public class Users
    {
        public int Id { get; set; }
        public string? Nome { get; set; }
        public string CPF { get; set; }
        public string Telefone { get; set; }
        public bool Status { get; set; }
        public int Historico { get; set; }
        public override string ToString()
        {
            return $"\n*************************" +
                $"\nID: {Id}" +
                $"\nNome: {Nome}" +
                $"\nCPF: {CPF}" +
                $"\nTelefone: {Telefone}" +
                $"\nStatus: {(Status ? "Ativo" : "Inativo")}" +
                $"\nHistórico: {Historico}" +
                $"\n*************************";
        }
    }
    public class Product
    {
        public int IdItem { get; set; }
        public string Descricao { get; set; }
        public bool Status { get; set; }
        public int Quantidade { get; set; }
        public double PrecoVenda { get; set; }


        public override string ToString()
        {
            return $"\n*************************" +
                $"\nCódigo do produto: {IdItem}" +
                $"\nDescrição do Produto: {Descricao}" +
                $"\nStatus: {(Status ? "Ativo" : "Inativo")}" +
                $"\nQuantidade: {Quantidade} UN" +
                $"\nPreço de Venda: R${PrecoVenda}" +
                $"\n*************************";
        }
    }
}
